 
1. When the game starts, the menu will be displayed, showing four options:


How do you want to initialize the board?
1. Predefined board/ blank board
2. Enter the initial board state manually
3. Load from a text file
4. Quit



2. The user can choose from the options 1, 2, 3, or 4:
   - Option 1: The game board is preinitialized with a predefined board.
   - Option 2: The user can enter the initial board state manually by specifying '.' for empty spaces, 'X' for White, and 'O' for Black.
   - Option 3: The user can load the initial board state from a text file named "gopatterns.txt".
   - Option 4: Choosing this option will quit the game.

3. If the user selects option 1 or 2, 3  the game board will be initialized accordingly.

4. The game will print the initial board on the screen, indicating the positions of 'X' and 'O' stones.

5. The game will take turns between 'X' and 'O' players. The current player will be displayed at the beginning of their turn. 
X is for the black stone which always goes first and '0' white stone goes next.

6. The user can make a move by entering the row and column where they want to place their stone. For example:

```
Current Player: X
Enter row (0-8), 'a' for AI help, or 'q' to quit: 3
Enter col (0-8): 4
```

7. If the user enters 'a', they will be asked what type of AI help they want:
   - Option 1: Move Suggestion - The AI will analyze the board and suggest the best move for the current player.
   - Option 2: Capture Help - The AI will help the user to capture opponent's stones by suggesting a move.

8. If the user enters 'q', the game will end, and the results will be displayed.

9. The game continues until both players pass their turns consecutively, which indicates the end of the game.

10. The game will print the final board and the number of stones captured by each player.


To play the game:

1. Run the `play()` method in your main program to start the game.
2. The menu will be displayed, and the user can make a choice from 1 to 4.
3. Based on the user's choice, the game will be initialized.
4. The user can make moves using the specified format for row and column inputs.
5. The AI helper can be used by entering 'a' during the user's turn.

 